name: Build Android APK (Debug)

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
  build-apk:
    runs-on: ubuntu-latest
    env:
      # מכבים BuildKit כדי למנוע את שגיאת ה-media type
      DOCKER_BUILDKIT: "0"

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # Cache להאצת בניות חוזרות
      - name: Cache .buildozer
        uses: actions/cache@v4
        with:
          path: ~/.buildozer
          key: buildozer-${{ runner.os }}-${{ hashFiles('buildozer.spec') }}
          restore-keys: |
            buildozer-${{ runner.os }}-

      - name: Cache .gradle
        uses: actions/cache@v4
        with:
          path: ~/.gradle
          key: gradle-${{ runner.os }}-${{ hashFiles('buildozer.spec') }}
          restore-keys: |
            gradle-${{ runner.os }}-

      # מושכים במפורש את התמונה מה- GitHub Container Registry (GHCR)
      - name: Pull Buildozer image (GHCR)
        run: |
          docker pull ghcr.io/kivy/buildozer:latest

      - name: Build with Buildozer (Debug APK)
        run: |
          docker run --rm \
            -e DOCKER_BUILDKIT=0 \
            -v "${GITHUB_WORKSPACE}":/home/user/hostcwd \
            -v "${HOME}/.buildozer":/home/user/.buildozer \
            -v "${HOME}/.gradle":/home/user/.gradle \
            -w /home/user/hostcwd \
            ghcr.io/kivy/buildozer:latest \
            buildozer android debug

      - name: List build outputs
        run: |
          ls -lah bin || true

      - name: Upload APK artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: MEAT-debug-apk
          path: |
            bin/*-debug.apk
